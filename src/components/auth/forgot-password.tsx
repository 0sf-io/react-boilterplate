/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/ZKdkPDGNanA
 */
import {yupResolver} from '@hookform/resolvers/yup';
import {Label} from 'components/ui/label';
import {Input} from 'components/ui/input';
import {Button} from 'components/ui/button';
import {ErrorMessage} from '@hookform/error-message';
import {WorkingIndicator} from 'components/common/working-indicator';
import {useState} from 'react';
import {useForm} from 'react-hook-form';
import {Trans, useTranslation} from 'react-i18next';
import {NavLink} from 'react-router-dom';
import * as yup from 'yup';

interface IFormProps {
    email: string;
}

const schema = yup.object({
    email: yup.string().email('This field must be a valid email').required('This field is required'),
}).required();

export function ForgotPassword() {
    const {register, formState: {errors}, handleSubmit} = useForm<IFormProps>({
        resolver: yupResolver(schema),
    });
    const [working, setWorking] = useState(false);
    const {t} = useTranslation();
    const onSubmit = async (data: IFormProps) => {
        setWorking(true);
        try {
            console.log(data);
            await new Promise((_, reject) => setTimeout(reject, 5000));
        } catch (e) {
            console.log(e);
        } finally {
            setWorking(false);
        }
    };

    return (
        <div className="mx-auto max-w-md space-y-6">
            <div className="space-y-2 text-center">
                <h1 className="text-3xl font-bold">
                    <Trans>Forgot Password</Trans>
                </h1>
                <p className="text-gray-500 dark:text-gray-400">
                    <Trans>Enter your email to reset your password</Trans>
                </p>
            </div>
            <form onSubmit={handleSubmit(onSubmit)}>
                <div className="space-y-4">
                    <div className="space-y-2">
                        <Label htmlFor="email">
                            <Trans>Email</Trans>
                        </Label>
                        <Input id="email" placeholder="m@example.com" type="email" {...register('email')}
                        />
                        <ErrorMessage errors={errors}
                                      name="email"
                                      render={({message}) => <p className="text-red-500 text-xs">{t(message)}</p>}
                        />
                    </div>
                    <Button className="w-full" type="submit" disabled={working}>
                        <Trans>Reset Password</Trans> {working && <WorkingIndicator className="ml-2"/>}
                    </Button>
                </div>
            </form>
            <div className="mt-4 text-center text-sm">
                <Trans>Remembered your password?</Trans>
                <NavLink className="underline" to="/auth/login">
                    <Trans>Log in</Trans>
                </NavLink>
            </div>
        </div>
    );
}
